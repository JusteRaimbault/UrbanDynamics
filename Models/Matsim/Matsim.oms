
// parameters
val popSample = Val[Double]
val fuaName = Val[String]
val seed = Val[Int]
val utilitywalk = Val[Double]
val utilitycar = Val[Double]
val utilitypt = Val[Double]

// runtime parameters
val iterations = Val[Int]
val threads = Val[Int]

// synth pop data
val dataDir = Val[File]

// matsim data
val planFile = Val[File]
val networkFile = Val[File]
val transitScheduleFile = Val[File]
val transitVehiclesFile = Val[File]

// matsim outputs
val outputDir = Val[File]

/*
val popcommand = "ls /data/LAD;sbt \"project spatialdata; runMain org.openmole.spatialdata.application.matsim.RunMatsim --synthpop --popMode=detailed --jobMode=sample --planMode=default --sample=${popSample} --FUAName=${fuaName} --FUAFile=/data/GHS_FUA_UCDB2015_GLOBE_R2019A_54009_1K_V1_0_WGS84.gpkg --LAFile=/data/LAD/LAD_WGS84.shp --OAFile=/data/OA/OA2011_WGS84.shp --MSOAFile=/data/MSOA/EnglandWalesScotland_MSOAWGS84.shp --SPENSERDirs=/data/SPENSER/England,/data/SPENSER/Scotland,/data/SPENSER/Wales --OSMBuildingsDirs=/data/OSM/England,/data/OSM/Scotland,/data/OSM/Wales --QUANTDataDir=/data/QUANT/ --output=Plans\";ls /data"
//val popcommand="ls spatialdata;pwd"

// FIXME random seed is not included in population generation
val population = ContainerTask(
    image = workDirectory / "images" / "matsim-population-1.0-0a52e7b80f.tar.gz",
    command = popcommand,
    workDirectory = "/root/spatialdata/library",
    containerSystem = Singularity()
) set (
   (inputs,outputs) += (popSample,fuaName),
   inputFiles += (dataDir,"/data/"),
   outputFiles += ("Plans_${fuaName}.xml",planFile),
   dataDir := workDirectory / "rawdata",
   popSample := 0.1,
   fuaName := "Taunton"
)
*/

//population hook CopyFileHook(planFile,"TEST_Plans_${fuaName}.xml")


// switch to 13.0: https://githubmemory.com/repo/matsim-org/matsim-code-examples/issues/542
// -> swissrailRaptor by default, by NUllPointerException at init


val readfiles = ScalaTask("""
   val networkFile = workDirectory / "Network" / "runtime" / "${fuaName}.xml.gz"
   val transitScheduleFile = workDirectory / "Network" / "runtime" / "${fuaName}_transit_schedule.xml.gz"
   val transitVehiclesFile = workDirectory / "Network" / "runtime" / "${fuaName}_transit_vehicles.xml.gz"
"""
) set (
  (inputs,outputs) += (fuaName, planFile),
  outputs += (networkFile, transitScheduleFile, transitVehiclesFile),
  fuaName := "Taunton",
  planFile := workDirectory / "TEST_Plans_Taunton.xml"
)


val matsimcommand = """
export SEED=${seed};export ITERATIONS=${iterations};export THREADS=${threads}
export UTILITYWALK=${utilitywalk};export UTILITYPT=${utilitypt};export UTILITYCAR=${utilitycar}
./config.sh
java -Xmx18G -cp matsim-12.0/matsim-12.0.jar org.matsim.run.Controler config_runtime.xml
"""

val matsim = ContainerTask(
  image = workDirectory / "images" / "matsim-1.0-5bf344a8ec.tar.gz",
  command = matsimcommand,
  workDirectory = "/root/",
  containerSystem = Singularity(),
  errorOnReturnValue = false
) set (
  (inputs,outputs) += (popSample,fuaName,seed,utilitywalk,utilitycar,utilitypt,iterations,threads),
  inputFiles += (planFile,"Plans.xml"),
  inputFiles += (networkFile,"Network.xml.gz"),
  inputFiles += (transitScheduleFile,"transit_schedule.xml.gz"),
  inputFiles += (transitVehiclesFile,"transit_vehicles.xml.gz"),
  outputFiles += ("output",outputDir),
  //fuaName := "Exeter",
  //networkFile := workDirectory / "Network" / "runtime" / "Exeter.xml.gz",
  //transitScheduleFile := workDirectory / "Network" / "runtime" / "Exeter_transit_schedule.xml.gz",
  //transitVehiclesFile := workDirectory / "Network" / "runtime" / "Exeter_transit_vehicles.xml.gz",
  iterations := 1,
  threads := 10,
  seed := 42,
  utilitywalk := 0.0,
  utilitypt := 0.0,
  utilitycar := 100.0,
  //planFile := workDirectory / "TEST_Plans_Exeter.xml",
  //popSample := 0.1
)

// output: need to add counts / ptCount modules?


val outputProcessing = ScalaTask("""
  val modeShares = (outputDir / "modestats.txt").content.split("\n").last.split("\t").drop(1).map(_.toDouble)
  
"""
) set (
  inputs += (outputDir)
)




matsim hook CopyFileHook(outputDir,"TEST_output")
//population -- (matsim hook CopyFileHook(outputDir,"TEST_output"))
