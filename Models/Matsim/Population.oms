


// parameters
val popSample = Val[Double]
val fuaName = Val[String]
val seed = Val[Int]
val utilitywalk = Val[Double]
val utilitycar = Val[Double]
val utilitypt = Val[Double]

// runtime parameters
val iterations = Val[Int]
val threads = Val[Int]

// synth pop data
val dataDir = Val[File]

// matsim data
val planFile = Val[File]
val networkFile = Val[File]
val transitScheduleFile = Val[File]
val transitVehiclesFile = Val[File]

// matsim outputs
val outputDir = Val[File]

val popcommand = "ls /data/LAD;sbt \"project spatialdata; runMain org.openmole.spatialdata.application.matsim.RunMatsim --synthpop --popMode=detailed --jobMode=sample --planMode=default --sample=${popSample} --FUAName=${fuaName} --FUAFile=/data/GHS_FUA_UCDB2015_GLOBE_R2019A_54009_1K_V1_0_WGS84.gpkg --LAFile=/data/LAD/LAD_WGS84.shp --OAFile=/data/OA/OA2011_WGS84.shp --MSOAFile=/data/MSOA/EnglandWalesScotland_MSOAWGS84.shp --SPENSERDirs=/data/SPENSER/England,/data/SPENSER/Scotland,/data/SPENSER/Wales --OSMBuildingsDirs=/data/OSM/England,/data/OSM/Scotland,/data/OSM/Wales --QUANTDataDir=/data/QUANT/ --output=Plans\";ls /data"
//val popcommand="ls spatialdata;pwd"

// FIXME random seed is not included in population generation
val population = ContainerTask(
    image = workDirectory / "images" / "matsim-population-1.0-0a52e7b80f.tar.gz",
    command = popcommand,
    workDirectory = "/root/spatialdata/library",
    containerSystem = Singularity()
) set (
   (inputs,outputs) += (popSample,fuaName),
   inputFiles += (dataDir,"/data/"),
   outputFiles += ("Plans_${fuaName}.xml",planFile),
   dataDir := workDirectory / "rawdata",
   popSample := 0.01,
   fuaName := "Taunton"
)

population hook CopyFileHook(planFile,"TEST_Plans_${fuaName}.xml")



