
// parameters
val popSample = Val[Double]
val seed = Val[Double]
val fuaInd = Val[Double]
val utilitywalk = Val[Double]
val utilitycar = Val[Double]
val utilitypt = Val[Double]

val fuaName = Val[String]
val fuaFile = Val[File]

// runtime parameters
val iterations = Val[Int]
val threads = Val[Int]

// synth pop data
val dataDir = Val[File]
val nwDir = Val[File]

// matsim data
val planFile = Val[File]
val networkFile = Val[File]
val transitScheduleFile = Val[File]
val transitVehiclesFile = Val[File]

// matsim outputs
val outputDir = Val[File]

val carShare = Val[Double]
val ptShare = Val[Double]
val walkShare = Val[Double]
val avgTripDistance = Val[Double]
val avgScore = Val[Double]


// hardcoded list of fuas
val setFUA = ScalaTask(
  """
  val potFUAs = fuaFile.content.split("\n").toSeq
  //val potFUAs = Seq("Taunton","Exeter")
  val fuaName = potFUAs((fuaInd*potFUAs.size.toDouble).toInt)
  //val fuaName="Taunton"
  """
) set (
   (inputs,outputs) += (popSample,seed,utilitywalk,utilitycar,utilitypt),
   inputs += (fuaInd,fuaFile),
   outputs += (fuaName),
   fuaFile := workDirectory / "areas.txt",
   popSample := 1.0
)

val popcommand = "ls /data/LAD;export SBT_OPTS=\"-Xmx16G\";sbt \"project spatialdata; runMain org.openmole.spatialdata.application.matsim.RunMatsim --synthpop --popMode=detailed --jobMode=sample --planMode=default --sample=${popSample} --FUAName=${fuaName} --FUAFile=/data/GHS_FUA_UCDB2015_GLOBE_R2019A_54009_1K_V1_0_WGS84.gpkg --LAFile=/data/LAD/LAD_WGS84.shp --OAFile=/data/OA/OA2011_WGS84.shp --MSOAFile=/data/MSOA/EnglandWalesScotland_MSOAWGS84.shp --SPENSERDirs=/data/SPENSER/England,/data/SPENSER/Scotland,/data/SPENSER/Wales --OSMBuildingsDirs=/data/OSM/England,/data/OSM/Scotland,/data/OSM/Wales --QUANTDataDir=/data/QUANT/ --output=Plans\";ls /data;[ ! -f Plans_${fuaName}.xml ] && touch Plans_${fuaName}.xml"


// FIXME random seed is not included in population generation
val population = ContainerTask(
    image = workDirectory / "images" / "matsim-population-1.0-0a52e7b80f.tar.gz",
    command = popcommand,
    workDirectory = "/root/spatialdata/library",
    containerSystem = Singularity(),
    errorOnReturnValue = false
) set (
   (inputs,outputs) += (fuaName,popSample,seed,utilitywalk,utilitycar,utilitypt),
   inputFiles += (dataDir,"/data/"),
   outputFiles += ("Plans_${fuaName}.xml",planFile),
   dataDir := workDirectory / "rawdata"
)


//population hook CopyFileHook(planFile,"TEST_Plans_${fuaName}.xml")


// switch to 13.0: https://githubmemory.com/repo/matsim-org/matsim-code-examples/issues/542
// -> swissrailRaptor by default, by NUllPointerException at init


val readfiles = ScalaTask("""
   val networkFile = nwDir / (fuaName+".xml.gz")
   val transitScheduleFile = nwDir / (fuaName+"_transit_schedule.xml.gz")
   val transitVehiclesFile = nwDir / (fuaName+"_transit_vehicles.xml.gz")
"""
) set (
  (inputs,outputs) += (fuaName,popSample,seed,utilitywalk,utilitycar,utilitypt,planFile),
  inputs += (nwDir),
  outputs += (networkFile, transitScheduleFile, transitVehiclesFile),
  nwDir := workDirectory / "Network" / "runtime"
)


val matsimcommand = """
export SEED=${seed.toInt};export ITERATIONS=${iterations};export THREADS=${threads}
export UTILITYWALK=${utilitywalk};export UTILITYPT=${utilitypt};export UTILITYCAR=${utilitycar}
./config.sh
java -Xmx18G -cp matsim-12.0/matsim-12.0.jar org.matsim.run.Controler config_runtime.xml
mkdir output
"""

val matsim = ContainerTask(
  image = workDirectory / "images" / "matsim-1.0-86a2c28210.tar.gz",
  command = matsimcommand,
  workDirectory = "/root/",
  containerSystem = Singularity(),
  errorOnReturnValue = false
) set (
  (inputs,outputs) += (popSample,fuaName,seed,utilitywalk,utilitycar,utilitypt,iterations,threads),
  inputFiles += (planFile,"Plans.xml"),
  inputFiles += (networkFile,"Network.xml.gz"),
  inputFiles += (transitScheduleFile,"transit_schedule.xml.gz"),
  inputFiles += (transitVehiclesFile,"transit_vehicles.xml.gz"),
  outputFiles += ("output",outputDir),
  //fuaName := "Exeter",
  //networkFile := workDirectory / "Network" / "runtime" / "Exeter.xml.gz",
  //transitScheduleFile := workDirectory / "Network" / "runtime" / "Exeter_transit_schedule.xml.gz",
  //transitVehiclesFile := workDirectory / "Network" / "runtime" / "Exeter_transit_vehicles.xml.gz",
  iterations := 1,
  threads := 10,
  //seed := 42,
  //utilitywalk := 0.0,
  //utilitypt := 0.0,
  //utilitycar := 100.0,
  //planFile := workDirectory / "TEST_Plans_Exeter.xml",
  //popSample := 0.1
)

// output: need to add counts / ptCount modules?


val outputProcessing = ScalaTask("""
  val modeShares: Array[Double] = if (outputDir.list.size>0) (outputDir / "modestats.txt").content.split("\n").last.split("\t").drop(1).map(_.toDouble) else Array(0.0,0.0,0.0)
  val carShare = modeShares(0)
  val ptShare = modeShares(1)
  val walkShare = modeShares(2)
  val avgTripDistance = if (outputDir.list.size>0) (outputDir / "traveldistancestats.txt").content.split("\n").last.split("\t").last.toDouble else 0.0
  val avgScore = if (outputDir.list.size>0) (outputDir / "scorestats.txt").content.split("\n").last.split("\t").dropRight(1).last.toDouble else 0.0
"""
) set (
  (inputs,outputs) += (popSample,fuaName,seed,utilitywalk,utilitycar,utilitypt,iterations,threads),
  inputs += (outputDir),
  outputs += (carShare, ptShare, walkShare, avgTripDistance, avgScore),
  outputDir := workDirectory / "Matsim" / "output"
)


val purpose = "SALTELLI"
val ts = ((new java.text.SimpleDateFormat("yyyyMMdd_HHmmss")).format(new java.util.Date()))
val indics_hook = AppendToCSVFileHook(workDirectory / "saltelli" / (ts+"_"+purpose+".csv"),arrayOnRow = true)

//val model = setFUA -- (population on LocalEnvironment(5)) -- readfiles -- (matsim on LocalEnvironment(1)) -- (outputProcessing hook indics_hook)
val model = setFUA -- population -- readfiles -- matsim -- (outputProcessing hook indics_hook)


SensitivitySaltelli(
  evaluation = model,
  inputs = Seq(
      utilitywalk in (0.0,100.0),
      utilitypt in (0.0,100.0),
      utilitycar in (0.0,100.0),
      seed in (0.0,10000.0),
      fuaInd in (0.0,0.9999999999)//,
      //popSample in (0.05,0.1)
      ),
  outputs = Seq(carShare, ptShare, walkShare, avgTripDistance, avgScore),
  sample = 25
) hook (workDirectory / "saltelli" / (ts+"_"+purpose))
