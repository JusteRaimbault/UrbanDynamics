
val region = Val[String]
val popfiles = Val[File]
//val msoayearlypops = Val[Array[File]]
val msoayearlypops = Val[File]
val years = Val[Array[String]]

val yearsval = Array("2011","2020","2030","2040","2050")

val spensercommand = "sh -c \"cd microsimulation;export HOME=/root;export REGION=${region};./run.sh;mkdir res;cp data/ssm_${region}_MSOA11_ppp_2011.csv res;cp data/ssm_${region}_MSOA11_ppp_2020.csv res;cp data/ssm_${region}_MSOA11_ppp_2030.csv res;cp data/ssm_${region}_MSOA11_ppp_2040.csv res;cp data/ssm_${region}_MSOA11_ppp_2050.csv res\""
//val spensercommand = s"sh -c \"cd microsimulation;export HOME=/root;export REGION=${region};./run.sh;mkdir res;${years.map{y => "cp data/ssm_"+region+"_MSOA11_ppp_"+y+".csv res"}.mkString(";")}"

val spenser = ContainerTask(
        //image = "nismod/spenser:1.1",
        image = "justeraimbault/spenser:1.1.2",
        //command = "sh -c \"chmod u+x setup.sh;ls; ./setup.sh\"",
        //command = "sh -c \"python3 WORKED_EXAMPLE/example.py\"",
        command = spensercommand//,
        //containerSystem = Singularity()
) set (
    (inputs,outputs) += (region,years),
    outputFiles += ("/home/docker/SPENSER/microsimulation/res",popfiles),
    years := yearsval
)

val processpop = ScalaTask("""
		|//import java.nio.file.Files
		|//val msoayearlypops = newDir()
		|//years.foreach{ y =>
		|val msoayearlypopstr = years.map{y =>
		|val yearlypops = (popfiles / ("ssm_"+region+"_MSOA11_ppp_"+y+".csv")).content.split("\n").toList.tail.map{case row => val a = row.split(","); (a(1),a(4).toDouble)}.groupBy{case (s,p) => s}.map{case (k,p) => k+","+y+","+p.map{_._2}.sum.toString}.mkString("\n")
		|//val res = newFile("pop",y+".csv")
		|//res.content = yearlypops
		|//Files.copy(res,msoayearlypops / (y+".csv"))
		|yearlypops
		|}.mkString("\n")
		|val msoayearlypops = newFile()
		|msoayearlypops.content = msoayearlypopstr
		""".stripMargin
	) set (
	(inputs,outputs) += (region,popfiles,years),
	outputs += (msoayearlypops)
)

val copyresdir = CopyFileHook(msoayearlypops, workDirectory / "test/${region}.csv" )


val exploregions = DirectSampling(
   evaluation = (spenser -- (processpop hook copyresdir)),
   sampling = (region in Seq("S12000030",""))
)

exploregions

